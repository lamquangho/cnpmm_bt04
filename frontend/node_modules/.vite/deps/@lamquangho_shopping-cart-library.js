import {
  require_jsx_runtime
} from "./chunk-6PXSGDAH.js";
import {
  require_react
} from "./chunk-DRWLMN53.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@lamquangho/shopping-cart-library/dist/index.esm.js
var import_jsx_runtime = __toESM(require_jsx_runtime());
var import_react = __toESM(require_react());
var Input = function(_a) {
  var _b = _a.type, type = _b === void 0 ? "text" : _b, placeholder = _a.placeholder, value = _a.value, onChange = _a.onChange, _c = _a.disabled, disabled = _c === void 0 ? false : _c, error = _a.error, label = _a.label, _d = _a.className, className = _d === void 0 ? "" : _d, min = _a.min, max = _a.max, step = _a.step;
  var handleChange = function(e) {
    if (onChange) {
      onChange(e.target.value);
    }
  };
  return (0, import_jsx_runtime.jsxs)("div", { className: "input-container ".concat(className), children: [label && (0, import_jsx_runtime.jsx)("label", { className: "input-label", children: label }), (0, import_jsx_runtime.jsx)("input", { type, placeholder, value, onChange: handleChange, disabled, className: "input-field ".concat(error ? "input-error" : ""), min, max, step }), error && (0, import_jsx_runtime.jsx)("span", { className: "input-error-message", children: error })] });
};
var Button = function(_a) {
  var children = _a.children, onClick = _a.onClick, _b = _a.variant, variant = _b === void 0 ? "primary" : _b, _c = _a.size, size = _c === void 0 ? "medium" : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.type, type = _e === void 0 ? "button" : _e, _f = _a.className, className = _f === void 0 ? "" : _f, _g = _a.loading, loading = _g === void 0 ? false : _g;
  var handleClick = function() {
    if (!disabled && !loading && onClick) {
      onClick();
    }
  };
  return (0, import_jsx_runtime.jsxs)("button", { type, onClick: handleClick, disabled: disabled || loading, className: "btn btn-".concat(variant, " btn-").concat(size, " ").concat(className), children: [loading && (0, import_jsx_runtime.jsx)("span", { className: "btn-spinner" }), children] });
};
var Modal = function(_a) {
  var isOpen = _a.isOpen, onClose = _a.onClose, title = _a.title, children = _a.children, _b = _a.size, size = _b === void 0 ? "medium" : _b, _c = _a.showCloseButton, showCloseButton = _c === void 0 ? true : _c, _d = _a.className, className = _d === void 0 ? "" : _d;
  (0, import_react.useEffect)(function() {
    var handleEscape = function(e) {
      if (e.key === "Escape") {
        onClose();
      }
    };
    if (isOpen) {
      document.addEventListener("keydown", handleEscape);
      document.body.style.overflow = "hidden";
    }
    return function() {
      document.removeEventListener("keydown", handleEscape);
      document.body.style.overflow = "unset";
    };
  }, [isOpen, onClose]);
  if (!isOpen)
    return null;
  var handleBackdropClick = function(e) {
    if (e.target === e.currentTarget) {
      onClose();
    }
  };
  return (0, import_jsx_runtime.jsx)("div", { className: "modal-overlay", onClick: handleBackdropClick, children: (0, import_jsx_runtime.jsxs)("div", { className: "modal-container modal-".concat(size, " ").concat(className), children: [title && (0, import_jsx_runtime.jsxs)("div", { className: "modal-header", children: [(0, import_jsx_runtime.jsx)("h2", { className: "modal-title", children: title }), showCloseButton && (0, import_jsx_runtime.jsx)("button", { className: "modal-close-button", onClick: onClose, "aria-label": "Close modal", children: "×" })] }), (0, import_jsx_runtime.jsx)("div", { className: "modal-content", children })] }) });
};
var Card = function(_a) {
  var children = _a.children, title = _a.title, subtitle = _a.subtitle, _b = _a.className, className = _b === void 0 ? "" : _b, _c = _a.hover, hover = _c === void 0 ? false : _c, _d = _a.padding, padding = _d === void 0 ? "medium" : _d, _e = _a.shadow, shadow = _e === void 0 ? "medium" : _e;
  return (0, import_jsx_runtime.jsxs)("div", { className: "card card-".concat(padding, " card-shadow-").concat(shadow, " ").concat(hover ? "card-hover" : "", " ").concat(className), children: [(title || subtitle) && (0, import_jsx_runtime.jsxs)("div", { className: "card-header", children: [title && (0, import_jsx_runtime.jsx)("h3", { className: "card-title", children: title }), subtitle && (0, import_jsx_runtime.jsx)("p", { className: "card-subtitle", children: subtitle })] }), (0, import_jsx_runtime.jsx)("div", { className: "card-content", children })] });
};
var CartItem = function(_a) {
  var item = _a.item, onUpdateQuantity = _a.onUpdateQuantity, onRemove = _a.onRemove, _b = _a.showImage, showImage = _b === void 0 ? true : _b, _c = _a.showDescription, showDescription = _c === void 0 ? false : _c, _d = _a.className, className = _d === void 0 ? "" : _d;
  var handleQuantityChange = function(newQuantity) {
    if (newQuantity <= 0) {
      onRemove(item.id);
    } else if (item.maxQuantity && newQuantity > item.maxQuantity) {
      onUpdateQuantity(item.id, item.maxQuantity);
    } else {
      onUpdateQuantity(item.id, newQuantity);
    }
  };
  var handleIncrement = function() {
    var newQuantity = item.quantity + 1;
    handleQuantityChange(newQuantity);
  };
  var handleDecrement = function() {
    var newQuantity = item.quantity - 1;
    handleQuantityChange(newQuantity);
  };
  var totalPrice = item.price * item.quantity;
  return (0, import_jsx_runtime.jsx)(Card, { className: "cart-item ".concat(className), padding: "medium", children: (0, import_jsx_runtime.jsxs)("div", { className: "cart-item-content", children: [showImage && item.image && (0, import_jsx_runtime.jsx)("div", { className: "cart-item-image", children: (0, import_jsx_runtime.jsx)("img", { src: item.image, alt: item.name }) }), (0, import_jsx_runtime.jsxs)("div", { className: "cart-item-details", children: [(0, import_jsx_runtime.jsx)("h4", { className: "cart-item-name", children: item.name }), showDescription && item.description && (0, import_jsx_runtime.jsx)("p", { className: "cart-item-description", children: item.description }), item.category && (0, import_jsx_runtime.jsx)("span", { className: "cart-item-category", children: item.category }), (0, import_jsx_runtime.jsxs)("div", { className: "cart-item-price", children: [(0, import_jsx_runtime.jsxs)("span", { className: "price-per-unit", children: ["$", item.price.toFixed(2), " each"] }), (0, import_jsx_runtime.jsxs)("span", { className: "price-total", children: ["$", totalPrice.toFixed(2), " total"] })] }), item.inStock === false && (0, import_jsx_runtime.jsx)("span", { className: "cart-item-out-of-stock", children: "Out of stock" })] }), (0, import_jsx_runtime.jsxs)("div", { className: "cart-item-controls", children: [(0, import_jsx_runtime.jsxs)("div", { className: "quantity-controls", children: [(0, import_jsx_runtime.jsx)(Button, { variant: "outline", size: "small", onClick: handleDecrement, disabled: item.quantity <= 1, children: "-" }), (0, import_jsx_runtime.jsx)("span", { className: "quantity-display", children: item.quantity }), (0, import_jsx_runtime.jsx)(Button, { variant: "outline", size: "small", onClick: handleIncrement, disabled: item.maxQuantity ? item.quantity >= item.maxQuantity : false, children: "+" })] }), (0, import_jsx_runtime.jsx)(Button, { variant: "danger", size: "small", onClick: function() {
    return onRemove(item.id);
  }, children: "Remove" })] })] }) });
};
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
    if (ar || !(i in from)) {
      if (!ar) ar = Array.prototype.slice.call(from, 0, i);
      ar[i] = from[i];
    }
  }
  return to.concat(ar || Array.prototype.slice.call(from));
}
var initialState = [];
var cartReducer = function(state, action) {
  switch (action.type) {
    case "ADD_ITEM": {
      var existingItem = state.find(function(item) {
        return item.id === action.payload.id;
      });
      if (existingItem) {
        return state.map(function(item) {
          return item.id === action.payload.id ? __assign(__assign({}, item), { quantity: item.quantity + 1 }) : item;
        });
      }
      return __spreadArray(__spreadArray([], state, true), [__assign(__assign({}, action.payload), { quantity: 1 })], false);
    }
    case "REMOVE_ITEM":
      return state.filter(function(item) {
        return item.id !== action.payload;
      });
    case "UPDATE_QUANTITY": {
      var _a = action.payload, id_1 = _a.id, quantity_1 = _a.quantity;
      if (quantity_1 <= 0) {
        return state.filter(function(item) {
          return item.id !== id_1;
        });
      }
      return state.map(function(item) {
        return item.id === id_1 ? __assign(__assign({}, item), { quantity: quantity_1 }) : item;
      });
    }
    case "CLEAR_CART":
      return [];
    default:
      return state;
  }
};
var CartContext = (0, import_react.createContext)(void 0);
var CartProvider = function(_a) {
  var children = _a.children;
  var _b = (0, import_react.useReducer)(cartReducer, initialState), items = _b[0], dispatch = _b[1];
  var addItem = function(item) {
    dispatch({ type: "ADD_ITEM", payload: item });
  };
  var removeItem = function(id) {
    dispatch({ type: "REMOVE_ITEM", payload: id });
  };
  var updateQuantity = function(id, quantity) {
    dispatch({ type: "UPDATE_QUANTITY", payload: { id, quantity } });
  };
  var clearCart = function() {
    dispatch({ type: "CLEAR_CART" });
  };
  var getTotalPrice = function() {
    return items.reduce(function(total, item) {
      return total + item.price * item.quantity;
    }, 0);
  };
  var getTotalItems = function() {
    return items.reduce(function(total, item) {
      return total + item.quantity;
    }, 0);
  };
  var getItemQuantity = function(id) {
    var item = items.find(function(item2) {
      return item2.id === id;
    });
    return item ? item.quantity : 0;
  };
  var value = {
    items,
    addItem,
    removeItem,
    updateQuantity,
    clearCart,
    getTotalPrice,
    getTotalItems,
    getItemQuantity
  };
  return (0, import_jsx_runtime.jsx)(CartContext.Provider, { value, children });
};
var useCart = function() {
  var context = (0, import_react.useContext)(CartContext);
  if (context === void 0) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
};
var ShoppingCart = function(_a) {
  var onCheckout = _a.onCheckout, onItemUpdate = _a.onItemUpdate, onItemRemove = _a.onItemRemove, _b = _a.showCheckoutButton, showCheckoutButton = _b === void 0 ? true : _b, _c = _a.showClearButton, showClearButton = _c === void 0 ? true : _c, maxItems = _a.maxItems, _d = _a.className, className = _d === void 0 ? "" : _d;
  var _e = useCart(), items = _e.items, removeItem = _e.removeItem, updateQuantity = _e.updateQuantity, clearCart = _e.clearCart, getTotalPrice = _e.getTotalPrice, getTotalItems = _e.getTotalItems;
  var handleUpdateQuantity = function(id, quantity) {
    updateQuantity(id, quantity);
    var item = items.find(function(item2) {
      return item2.id === id;
    });
    if (item && onItemUpdate) {
      onItemUpdate(__assign(__assign({}, item), { quantity }));
    }
  };
  var handleRemoveItem = function(id) {
    removeItem(id);
    if (onItemRemove) {
      onItemRemove(id);
    }
  };
  var handleCheckout = function() {
    if (onCheckout) {
      onCheckout(items);
    }
  };
  var handleClearCart = function() {
    clearCart();
  };
  var isMaxItemsReached = maxItems ? getTotalItems() >= maxItems : false;
  if (items.length === 0) {
    return (0, import_jsx_runtime.jsx)(Card, { className: "shopping-cart empty ".concat(className), padding: "large", children: (0, import_jsx_runtime.jsxs)("div", { className: "empty-cart", children: [(0, import_jsx_runtime.jsx)("div", { className: "empty-cart-icon", children: "🛒" }), (0, import_jsx_runtime.jsx)("h3", { children: "Your cart is empty" }), (0, import_jsx_runtime.jsx)("p", { children: "Add some items to get started!" })] }) });
  }
  return (0, import_jsx_runtime.jsxs)("div", { className: "shopping-cart ".concat(className), children: [(0, import_jsx_runtime.jsxs)(Card, { className: "cart-header", padding: "medium", children: [(0, import_jsx_runtime.jsxs)("div", { className: "cart-summary", children: [(0, import_jsx_runtime.jsx)("h2", { children: "Shopping Cart" }), (0, import_jsx_runtime.jsxs)("div", { className: "cart-stats", children: [(0, import_jsx_runtime.jsxs)("span", { className: "item-count", children: [getTotalItems(), " ", getTotalItems() === 1 ? "item" : "items"] }), (0, import_jsx_runtime.jsxs)("span", { className: "total-price", children: ["Total: $", getTotalPrice().toFixed(2)] })] })] }), showClearButton && (0, import_jsx_runtime.jsx)(Button, { variant: "outline", size: "small", onClick: handleClearCart, children: "Clear Cart" })] }), (0, import_jsx_runtime.jsx)("div", { className: "cart-items", children: items.map(function(item) {
    return (0, import_jsx_runtime.jsx)(CartItem, { item, onUpdateQuantity: handleUpdateQuantity, onRemove: handleRemoveItem, showImage: true, showDescription: true }, item.id);
  }) }), isMaxItemsReached && (0, import_jsx_runtime.jsx)(Card, { className: "max-items-warning", padding: "medium", children: (0, import_jsx_runtime.jsxs)("p", { children: ["⚠️ Maximum number of items reached (", maxItems, ")"] }) }), showCheckoutButton && (0, import_jsx_runtime.jsx)(Card, { className: "cart-footer", padding: "medium", children: (0, import_jsx_runtime.jsxs)("div", { className: "checkout-section", children: [(0, import_jsx_runtime.jsxs)("div", { className: "checkout-total", children: [(0, import_jsx_runtime.jsx)("span", { className: "total-label", children: "Total:" }), (0, import_jsx_runtime.jsxs)("span", { className: "total-amount", children: ["$", getTotalPrice().toFixed(2)] })] }), (0, import_jsx_runtime.jsx)(Button, { variant: "primary", size: "large", onClick: handleCheckout, className: "checkout-button", children: "Proceed to Checkout" })] }) })] });
};
export {
  Button,
  Card,
  CartItem,
  CartProvider,
  Input,
  Modal,
  ShoppingCart,
  useCart
};
//# sourceMappingURL=@lamquangho_shopping-cart-library.js.map
