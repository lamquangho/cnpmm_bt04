import { jsxs, jsx } from 'react/jsx-runtime';
import { useEffect, createContext, useReducer, useContext } from 'react';

var Input = function (_a) {
    var _b = _a.type, type = _b === void 0 ? 'text' : _b, placeholder = _a.placeholder, value = _a.value, onChange = _a.onChange, _c = _a.disabled, disabled = _c === void 0 ? false : _c, error = _a.error, label = _a.label, _d = _a.className, className = _d === void 0 ? '' : _d, min = _a.min, max = _a.max, step = _a.step;
    var handleChange = function (e) {
        if (onChange) {
            onChange(e.target.value);
        }
    };
    return (jsxs("div", { className: "input-container ".concat(className), children: [label && jsx("label", { className: "input-label", children: label }), jsx("input", { type: type, placeholder: placeholder, value: value, onChange: handleChange, disabled: disabled, className: "input-field ".concat(error ? 'input-error' : ''), min: min, max: max, step: step }), error && jsx("span", { className: "input-error-message", children: error })] }));
};

var Button = function (_a) {
    var children = _a.children, onClick = _a.onClick, _b = _a.variant, variant = _b === void 0 ? 'primary' : _b, _c = _a.size, size = _c === void 0 ? 'medium' : _c, _d = _a.disabled, disabled = _d === void 0 ? false : _d, _e = _a.type, type = _e === void 0 ? 'button' : _e, _f = _a.className, className = _f === void 0 ? '' : _f, _g = _a.loading, loading = _g === void 0 ? false : _g;
    var handleClick = function () {
        if (!disabled && !loading && onClick) {
            onClick();
        }
    };
    return (jsxs("button", { type: type, onClick: handleClick, disabled: disabled || loading, className: "btn btn-".concat(variant, " btn-").concat(size, " ").concat(className), children: [loading && jsx("span", { className: "btn-spinner" }), children] }));
};

var Modal = function (_a) {
    var isOpen = _a.isOpen, onClose = _a.onClose, title = _a.title, children = _a.children, _b = _a.size, size = _b === void 0 ? 'medium' : _b, _c = _a.showCloseButton, showCloseButton = _c === void 0 ? true : _c, _d = _a.className, className = _d === void 0 ? '' : _d;
    useEffect(function () {
        var handleEscape = function (e) {
            if (e.key === 'Escape') {
                onClose();
            }
        };
        if (isOpen) {
            document.addEventListener('keydown', handleEscape);
            document.body.style.overflow = 'hidden';
        }
        return function () {
            document.removeEventListener('keydown', handleEscape);
            document.body.style.overflow = 'unset';
        };
    }, [isOpen, onClose]);
    if (!isOpen)
        return null;
    var handleBackdropClick = function (e) {
        if (e.target === e.currentTarget) {
            onClose();
        }
    };
    return (jsx("div", { className: "modal-overlay", onClick: handleBackdropClick, children: jsxs("div", { className: "modal-container modal-".concat(size, " ").concat(className), children: [title && (jsxs("div", { className: "modal-header", children: [jsx("h2", { className: "modal-title", children: title }), showCloseButton && (jsx("button", { className: "modal-close-button", onClick: onClose, "aria-label": "Close modal", children: "\u00D7" }))] })), jsx("div", { className: "modal-content", children: children })] }) }));
};

var Card = function (_a) {
    var children = _a.children, title = _a.title, subtitle = _a.subtitle, _b = _a.className, className = _b === void 0 ? '' : _b, _c = _a.hover, hover = _c === void 0 ? false : _c, _d = _a.padding, padding = _d === void 0 ? 'medium' : _d, _e = _a.shadow, shadow = _e === void 0 ? 'medium' : _e;
    return (jsxs("div", { className: "card card-".concat(padding, " card-shadow-").concat(shadow, " ").concat(hover ? 'card-hover' : '', " ").concat(className), children: [(title || subtitle) && (jsxs("div", { className: "card-header", children: [title && jsx("h3", { className: "card-title", children: title }), subtitle && jsx("p", { className: "card-subtitle", children: subtitle })] })), jsx("div", { className: "card-content", children: children })] }));
};

var CartItem = function (_a) {
    var item = _a.item, onUpdateQuantity = _a.onUpdateQuantity, onRemove = _a.onRemove, _b = _a.showImage, showImage = _b === void 0 ? true : _b, _c = _a.showDescription, showDescription = _c === void 0 ? false : _c, _d = _a.className, className = _d === void 0 ? '' : _d;
    var handleQuantityChange = function (newQuantity) {
        if (newQuantity <= 0) {
            onRemove(item.id);
        }
        else if (item.maxQuantity && newQuantity > item.maxQuantity) {
            onUpdateQuantity(item.id, item.maxQuantity);
        }
        else {
            onUpdateQuantity(item.id, newQuantity);
        }
    };
    var handleIncrement = function () {
        var newQuantity = item.quantity + 1;
        handleQuantityChange(newQuantity);
    };
    var handleDecrement = function () {
        var newQuantity = item.quantity - 1;
        handleQuantityChange(newQuantity);
    };
    var totalPrice = item.price * item.quantity;
    return (jsx(Card, { className: "cart-item ".concat(className), padding: "medium", children: jsxs("div", { className: "cart-item-content", children: [showImage && item.image && (jsx("div", { className: "cart-item-image", children: jsx("img", { src: item.image, alt: item.name }) })), jsxs("div", { className: "cart-item-details", children: [jsx("h4", { className: "cart-item-name", children: item.name }), showDescription && item.description && (jsx("p", { className: "cart-item-description", children: item.description })), item.category && (jsx("span", { className: "cart-item-category", children: item.category })), jsxs("div", { className: "cart-item-price", children: [jsxs("span", { className: "price-per-unit", children: ["$", item.price.toFixed(2), " each"] }), jsxs("span", { className: "price-total", children: ["$", totalPrice.toFixed(2), " total"] })] }), item.inStock === false && (jsx("span", { className: "cart-item-out-of-stock", children: "Out of stock" }))] }), jsxs("div", { className: "cart-item-controls", children: [jsxs("div", { className: "quantity-controls", children: [jsx(Button, { variant: "outline", size: "small", onClick: handleDecrement, disabled: item.quantity <= 1, children: "-" }), jsx("span", { className: "quantity-display", children: item.quantity }), jsx(Button, { variant: "outline", size: "small", onClick: handleIncrement, disabled: item.maxQuantity ? item.quantity >= item.maxQuantity : false, children: "+" })] }), jsx(Button, { variant: "danger", size: "small", onClick: function () { return onRemove(item.id); }, children: "Remove" })] })] }) }));
};

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
/* global Reflect, Promise, SuppressedError, Symbol, Iterator */


var __assign = function() {
    __assign = Object.assign || function __assign(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

typeof SuppressedError === "function" ? SuppressedError : function (error, suppressed, message) {
    var e = new Error(message);
    return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
};

// Initial state
var initialState = [];
// Reducer
var cartReducer = function (state, action) {
    switch (action.type) {
        case 'ADD_ITEM': {
            var existingItem = state.find(function (item) { return item.id === action.payload.id; });
            if (existingItem) {
                return state.map(function (item) {
                    return item.id === action.payload.id
                        ? __assign(__assign({}, item), { quantity: item.quantity + 1 }) : item;
                });
            }
            return __spreadArray(__spreadArray([], state, true), [__assign(__assign({}, action.payload), { quantity: 1 })], false);
        }
        case 'REMOVE_ITEM':
            return state.filter(function (item) { return item.id !== action.payload; });
        case 'UPDATE_QUANTITY': {
            var _a = action.payload, id_1 = _a.id, quantity_1 = _a.quantity;
            if (quantity_1 <= 0) {
                return state.filter(function (item) { return item.id !== id_1; });
            }
            return state.map(function (item) {
                return item.id === id_1 ? __assign(__assign({}, item), { quantity: quantity_1 }) : item;
            });
        }
        case 'CLEAR_CART':
            return [];
        default:
            return state;
    }
};
// Context
var CartContext = createContext(undefined);
var CartProvider = function (_a) {
    var children = _a.children;
    var _b = useReducer(cartReducer, initialState), items = _b[0], dispatch = _b[1];
    var addItem = function (item) {
        dispatch({ type: 'ADD_ITEM', payload: item });
    };
    var removeItem = function (id) {
        dispatch({ type: 'REMOVE_ITEM', payload: id });
    };
    var updateQuantity = function (id, quantity) {
        dispatch({ type: 'UPDATE_QUANTITY', payload: { id: id, quantity: quantity } });
    };
    var clearCart = function () {
        dispatch({ type: 'CLEAR_CART' });
    };
    var getTotalPrice = function () {
        return items.reduce(function (total, item) { return total + (item.price * item.quantity); }, 0);
    };
    var getTotalItems = function () {
        return items.reduce(function (total, item) { return total + item.quantity; }, 0);
    };
    var getItemQuantity = function (id) {
        var item = items.find(function (item) { return item.id === id; });
        return item ? item.quantity : 0;
    };
    var value = {
        items: items,
        addItem: addItem,
        removeItem: removeItem,
        updateQuantity: updateQuantity,
        clearCart: clearCart,
        getTotalPrice: getTotalPrice,
        getTotalItems: getTotalItems,
        getItemQuantity: getItemQuantity,
    };
    return (jsx(CartContext.Provider, { value: value, children: children }));
};
// Hook to use cart context
var useCart = function () {
    var context = useContext(CartContext);
    if (context === undefined) {
        throw new Error('useCart must be used within a CartProvider');
    }
    return context;
};

var ShoppingCart = function (_a) {
    var onCheckout = _a.onCheckout, onItemUpdate = _a.onItemUpdate, onItemRemove = _a.onItemRemove, _b = _a.showCheckoutButton, showCheckoutButton = _b === void 0 ? true : _b, _c = _a.showClearButton, showClearButton = _c === void 0 ? true : _c, maxItems = _a.maxItems, _d = _a.className, className = _d === void 0 ? '' : _d;
    var _e = useCart(), items = _e.items, removeItem = _e.removeItem, updateQuantity = _e.updateQuantity, clearCart = _e.clearCart, getTotalPrice = _e.getTotalPrice, getTotalItems = _e.getTotalItems;
    var handleUpdateQuantity = function (id, quantity) {
        updateQuantity(id, quantity);
        var item = items.find(function (item) { return item.id === id; });
        if (item && onItemUpdate) {
            onItemUpdate(__assign(__assign({}, item), { quantity: quantity }));
        }
    };
    var handleRemoveItem = function (id) {
        removeItem(id);
        if (onItemRemove) {
            onItemRemove(id);
        }
    };
    var handleCheckout = function () {
        if (onCheckout) {
            onCheckout(items);
        }
    };
    var handleClearCart = function () {
        clearCart();
    };
    var isMaxItemsReached = maxItems ? getTotalItems() >= maxItems : false;
    if (items.length === 0) {
        return (jsx(Card, { className: "shopping-cart empty ".concat(className), padding: "large", children: jsxs("div", { className: "empty-cart", children: [jsx("div", { className: "empty-cart-icon", children: "\uD83D\uDED2" }), jsx("h3", { children: "Your cart is empty" }), jsx("p", { children: "Add some items to get started!" })] }) }));
    }
    return (jsxs("div", { className: "shopping-cart ".concat(className), children: [jsxs(Card, { className: "cart-header", padding: "medium", children: [jsxs("div", { className: "cart-summary", children: [jsx("h2", { children: "Shopping Cart" }), jsxs("div", { className: "cart-stats", children: [jsxs("span", { className: "item-count", children: [getTotalItems(), " ", getTotalItems() === 1 ? 'item' : 'items'] }), jsxs("span", { className: "total-price", children: ["Total: $", getTotalPrice().toFixed(2)] })] })] }), showClearButton && (jsx(Button, { variant: "outline", size: "small", onClick: handleClearCart, children: "Clear Cart" }))] }), jsx("div", { className: "cart-items", children: items.map(function (item) { return (jsx(CartItem, { item: item, onUpdateQuantity: handleUpdateQuantity, onRemove: handleRemoveItem, showImage: true, showDescription: true }, item.id)); }) }), isMaxItemsReached && (jsx(Card, { className: "max-items-warning", padding: "medium", children: jsxs("p", { children: ["\u26A0\uFE0F Maximum number of items reached (", maxItems, ")"] }) })), showCheckoutButton && (jsx(Card, { className: "cart-footer", padding: "medium", children: jsxs("div", { className: "checkout-section", children: [jsxs("div", { className: "checkout-total", children: [jsx("span", { className: "total-label", children: "Total:" }), jsxs("span", { className: "total-amount", children: ["$", getTotalPrice().toFixed(2)] })] }), jsx(Button, { variant: "primary", size: "large", onClick: handleCheckout, className: "checkout-button", children: "Proceed to Checkout" })] }) }))] }));
};

export { Button, Card, CartItem, CartProvider, Input, Modal, ShoppingCart, useCart };
//# sourceMappingURL=index.esm.js.map
